con<-'Driver=SQL Server;Data Source=MININT-AID9UOO;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
odbcDriverConnect(connection = con)
con<-'Driver=SQL Server;DSN=MININT-AID9UOO;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
odbcDriverConnect(connection = con)
con<-'Driver=SQL Server;Data Source=MININT-AID9UOO;Initial Catalog=TaxiDemo;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
DSN<-'MININT-AID9UOO'
odbcDriverConnect(connection = con, dsn = DSN)
odbcDriverConnect(connection = con)
con<-'Driver=SQL Server;SERVER=MININT-AID9UOO;Initial Catalog=TaxiDemo;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
odbcDriverConnect(connection = con)
?RODBC
conn<-odbcDriverConnect(connection = con)
sqlTables(conn)
sqlColumns(conn,nyctaxi_sample)
sqlColumns(conn,dbo.nyctaxi_sample)
sqlColumns(conn,'nyctaxi_sample')
sqlColumns(conn,'dbo.nyctaxi_sample')
sqlQuery(conn, 'select top 10 * from dbo.nyctaxi_sample')
sqlQuery(conn, 'select top 10 * from nyctaxi_sample')
sqlQuery(conn, 'select top 10 * from nyctaxi_sample')
odbcClose(conn)
chan <- odbcDriverConnect(connection = con)
con
sqlTables(chan)
?odbcConnectDbase
con<-'Data Source=MININT-AID9UOO;DATABASE=TaxiDemo;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
chan <- odbcDriverConnect(connection = con)
con<-'Driver=SQL Server;SERVER=MININT-AID9UOO;DATABASE=TaxiDemo;User Id=TaxiDemoAdmin;Password=$t@t1cFr1ct10n;'
chan <- odbcDriverConnect(connection = con)
sqlTables(channel = chan)
sqlQuery(chan,'select top 10 * from nyctaxi_sample')
connStr <- "Driver = SQL Server;Server = MININT-AID9UOO;DATABASE=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n;"
con<-'Driver=SQL Server;SERVER=connStr <- "Driver = SQL Server;Server = MININT-AID9UOO;DATABASE=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n;";'
chan <- odbcDriverConnect(connection = con)
library(RODBC)
con<-'Driver=SQL Server;SERVER=connStr <- "Driver = SQL Server;Server = MININT-AID9UOO;DATABASE=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n;";'
chan <- odbcDriverConnect(connection = con)
library(RevoScaleR)
connStr <- "Driver=SQL Server;Server=localhost;Database=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n"
# Set ComputeContext. Needs a temp directory path to serialize R objects back and forth
sqlShareDir <- paste("C:\\AllShare\\", Sys.getenv("USERNAME"), sep = "")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir,
wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
rxGetComputeContext()
data("mtcars")
testmodel<-lm(mpg~wt,mtcars)
?predict
predict(testmodel,1500)
predict(testmodel)
testmodel<-glm(cyl~hp,mtcars,family=poisson)
predict(testmodel)
testmodel
summary(testmodel)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0,2,step=0.1))
if (!('ggmap' %in% rownames(installed.packages()))){
install.packages('ggmap')
}
if (!('mapproj' %in% rownames(installed.packages()))){
install.packages('mapproj')
}
if (!('ROCR' %in% rownames(installed.packages()))){
install.packages('ROCR')
}
if (!('RODBC' %in% rownames(installed.packages()))){
install.packages('RODBC')
}
library(RevoScaleR)
connStr <- "Driver=SQL Server;Server=localhost;Database=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n"
sqlShareDir <- paste("C:\\AllShare\\",Sys.getenv("USERNAME"),sep="")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir,
wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
sampleDataQuery <- "select top 3000 tipped, fare_amount, passenger_count,trip_time_in_secs,trip_distance,
pickup_datetime, dropoff_datetime, pickup_longitude, pickup_latitude, dropoff_longitude,
dropoff_latitude from nyctaxi_sample order by pickup_datetime"
inDataSource <- RxSqlServerData(sqlQuery = sampleDataQuery, connectionString = connStr,
colClasses = c(pickup_longitude = "numeric", pickup_latitude = "numeric",
dropoff_longitude = "numeric", dropoff_latitude = "numeric"),
rowsPerRead=500)
rxGetVarInfo(data = inDataSource)
start.time <- proc.time()
rxSummary(~fare_amount:F(passenger_count), data = inDataSource)
used.time <- proc.time() - start.time
print(paste("It takes CPU Time=", round(used.time[1]+used.time[2],2)," seconds, Elapsed Time=",
round(used.time[3],2), " seconds to summarize the inDataSource.", sep=""))
start.time <- proc.time()
rxHistogram(~fare_amount, data = inDataSource, title = "Fare Amount Histogram")
used.time <- proc.time() - start.time
print(paste("It takes CPU Time=", round(used.time[1]+used.time[2],2),
" seconds, Elapsed Time=", round(used.time[3],2), " seconds to generate histogram.", sep=""))
mapPlot <- function(inDataSource, googMap){
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
library(ggmap)
library(mapproj)
gc <- geocode("Times Square", source = "google")
googMap <- get_googlemap(center = as.numeric(gc), zoom = 12, maptype = 'roadmap', color = 'color')
myplots <- rxExec(mapPlot, inDataSource, googMap, timesToRun = 1)
mapPlot <- function(inDataSource, googMap){
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
mapPlot <- function(inDataSource, googMap){
if (!('ggmap' %in% rownames(installed.packages()))){
install.packages('ggmap')
}
if (!('mapproj' %in% rownames(installed.packages()))){
install.packages('mapproj')
}
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
myplots <- rxExec(mapPlot, inDataSource, googMap, timesToRun = 1)
if (!('ggmap' %in% rownames(installed.packages()))){
install.packages('ggmap')
}
if (!('mapproj' %in% rownames(installed.packages()))){
install.packages('mapproj')
}
if (!('ROCR' %in% rownames(installed.packages()))){
install.packages('ROCR')
}
if (!('RODBC' %in% rownames(installed.packages()))){
install.packages('RODBC')
}
library(RevoScaleR)
# Define the connection string
# This walkthrough requires SQL authentication
connStr <- "Driver=SQL Server;Server=localhost;Database=TaxiDemo;Uid=TaxiDemoAdmin;Pwd=$t@t1cFr1ct10n"
# Set ComputeContext. Needs a temp directory path to serialize R objects back and forth
sqlShareDir <- paste("C:\\AllShare\\",Sys.getenv("USERNAME"),sep="")
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
cc <- RxInSqlServer(connectionString = connStr, shareDir = sqlShareDir,
wait = sqlWait, consoleOutput = sqlConsoleOutput)
rxSetComputeContext(cc)
#Define a DataSource (from a select query) to be used to explore the data and generate features from.
#Keep in mind that inDataSource is just a reference to the result dataset from the SQL query.
sampleDataQuery <- "select top 3000 tipped, fare_amount, passenger_count,trip_time_in_secs,trip_distance,
pickup_datetime, dropoff_datetime, pickup_longitude, pickup_latitude, dropoff_longitude,
dropoff_latitude from nyctaxi_sample order by pickup_datetime"
inDataSource <- RxSqlServerData(sqlQuery = sampleDataQuery, connectionString = connStr,
colClasses = c(pickup_longitude = "numeric", pickup_latitude = "numeric",
dropoff_longitude = "numeric", dropoff_latitude = "numeric"),
rowsPerRead=500)
mapPlot <- function(inDataSource, googMap){
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
library(ggmap)
library(mapproj)
# Get the map with Times Square, NY as the center. This is run on the R Client
gc <- geocode("Times Square", source = "google")
googMap <- get_googlemap(center = as.numeric(gc), zoom = 12, maptype = 'roadmap', color = 'color')
# Run the points plotting on SQL server. Passing in the map data as arg to remotely executed function.
# The points are in the database and will be plotted on the map
myplots <- rxExec(mapPlot, inDataSource, googMap, timesToRun = 1)
mapPlot <- function(inDataSource, googMap){
if (!('ggmap' %in% rownames(installed.packages()))){
install.packages('ggmap')
}
if (!('mapproj' %in% rownames(installed.packages()))){
install.packages('mapproj')
}
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
myplots <- rxExec(mapPlot, inDataSource, googMap, timesToRun = 1)
?install.packages
.libPaths()
mapPlot <- function(inDataSource, googMap){
library(ggmap)
library(mapproj)
# Open Source R functions require data to be brought back in memory into data frames. Use rxImport to bring in data.
# Remember: This whole function runs in the SQL Server Context.
ds <- rxImport(inDataSource)
p<-ggmap(googMap)+
geom_point(aes(x = pickup_longitude, y =pickup_latitude ),
data=ds, alpha =.5, color="darkred", size = 1.5)
return(list(myplot=p))
}
myplots <- rxExec(mapPlot, inDataSource, googMap, timesToRun = 1)
install.packages('ggmap',lib='C:\Program Files\RRO\RRO-3.2.2-for-RRE-7.5.0\R-3.2.2\library')
install.packages("ggmap","C:\Program Files\RRO\RRO-3.2.2-for-RRE-7.5.0\R-3.2.2\library")
install.packages("ggmap",lib="C:\Program Files\RRO\RRO-3.2.2-for-RRE-7.5.0\R-3.2.2\library")
.libPaths()
install.packages("ggmap",lib="C:/Program Files/RRO/RRO-3.2.2-for-RRE-7.5.0/R-3.2.2/library")
install.packages("ggmap", lib = "C:/Program Files/RRO/RRO-3.2.2-for-RRE-7.5.0/R-3.2.2/library")
install.packages("RevoScaleR")
?install.packages
.libPaths()
.libPaths(new)
.libPaths('C:\Program Files\Microsoft\MRO\R-3.2.3\library')
.libPaths('C:/Program Files/Microsoft/MRO/R-3.2.3/library')
.libPaths()
install.packages(RevoScaleR)
install.packages('RevoScaleR')
install.packages('RevoScaleR', lib = 'C:/Program Files/Microsoft/MRO/R-3.2.3/library')
.libPaths()
library(RevoScaleR)
install.packages('RevoScaleR')
install.packages('RevoScaleR', lib='C:/Program Files/Microsoft/MRO/R-3.2.3/library')
install.packages('RevoScaleR', lib='C:/Program Files/Microsoft/MRO/R-3.2.3/library')
library(RevoScaleR)
install.packages("RevoScaleR")
library(RevoScaleR)
library(RevoScaleR)
house1<- c(459950, 3, 1187, 6660)
house2<- c(455000, 3, 1150, 5500)
house3<- c(441900, 3, 996, 6318)
house4<- c(451000, 3, 1326, 5200)
price<- c(459950, 455000, 441900, 451000)
br<- c(3,3,3,3)
sqft<-c(1187, 1150, 996, 1326)
lot<-c(6660, 5500, 6318, 5200)
price<-price-400000
price
price<-abs(price-100000)
price
price<-price/100000
price
br<-c(1,1,1,1)
sqft<-sqft-900
sqft
sqft<-sqft/500
sqft
lot<-lot-5000
lot<-lot/2000
lot
housematrix<-rbind(price,br,sqft,lot)
housematrix
bath<-c(2,1,1,2)
bath<-bath/3
housematrix<-rbind(price,bath,sqft,lot)
housematrix
housematrix<-cbind(price,bath,sqft,lot)
housematrix
min<-c(0,0,0,0)
max<-1,1,1,1
max<-c(1,1,1,1)
housematrix<-rbind(min, housematrix, max)
housematrix
install.packages(fmsb)
install.packages('fmsb')
library(fmsb)
?radarchart
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = TRUE)
housematrix<- as.data.frame(housematrix)
housematrix
housematrix<-cbind(price,bath,sqft,lot)
housematrix<-rbind(min, housematrix, max)
housematrix
rownames(housematrix)
rownames(housematrix)<-c('min','house1','house2','house3','house4','max')
housematrix<-as.data.frame(housematrix)
housematrix
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = TRUE)
price <-price*4
lot<-lot*2
sqft<-sqft*3
housematrix<-cbind(price,bath,sqft,lot)
> housematrix<-rbind(min, housematrix, max)
housematrix<-cbind(price,bath,sqft,lot)
housematrix<-rbind(min, housematrix, max)
rownames(housematrix)<-c('min','house1','house2','house3','house4','max')
housematrix<-as.data.frame(housematrix)
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = TRUE)
housematrix
max<-c(4,1,3,2)
housematrix<-cbind(price,bath,sqft,lot)
housematrix<-rbind(min, housematrix, max)
rownames(housematrix)<-c('min','house1','house2','house3','house4','max')
housematrix<-as.data.frame(housematrix)
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = TRUE)
housematrix
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE)
?radarchart
housematrix<-housematrix[2:4]
housematrix
housematrix<-cbind(price,bath,sqft,lot)
rownames(housematrix)<-c('house1','house2','house3','house4')
housematrix<-as.data.frame(housematrix)
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE)
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE, vlabels = c('house1','house2','house3','house4'))
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE, vlabels = c('price','Baths','sqft','lot size'))
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE, vlabels = c('price','Baths','sqft','lot size'), centerzero = TRUE)
housematrix
housematrix<-rbind(price,bath,sqft,lot)
colnames(housematrix)<-c('house1','house2','house3','house4')
housematrix<-as.data.frame(housematrix)
radarchart(df=housematrix, axistype = 0, title = "house selection", maxmin = FALSE, vlabels = c('price','Baths','sqft','lot size'), centerzero = TRUE)
library(shiny)
?reactive
??reactive
??GGVIS
data(mtcars)
plot(mpg,wt)
plot(mpg,wt, mtcars)
plot(mtcars$mpg,mtcars$wt)
install.packages('AppliedPredictiveLearning')
library(AppliedPredictiveLearning)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(AlzheimersDisease)
data(concrete)
library(caret)
set.seed(1000)
in.Train = createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training=mixtures[inTrain]
training=mixtures[inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training=mixtures[inTrain,]
testing=mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength, color=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh)
warnings()
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength, col=factor(mixtures$FlyAsh))
plot(mixtures$CompressiveStrength, col=factor(mixtures$Age))
hist(mixtures$Superplasticizer)
head(mixtures$Superplasticizer, 20)
head(mixtures)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData<-data.frame(diagnosis, predictors)
intrain<-createDataPartition(adData$diagnosis,p=3/4)[[1]]
training<-adData[,inTrain]
training<-adData[inTrain,]
testing<-adData[,-inTrain]
head(AlzheimerDisease)
head(adData)
summary(adData)
adData$names
str(addata)
str(adData)
sampleset<-adData[,IL_3]
sampleset<-adData[,"IL_3"]
sampleset
sampleset<-adData[,"IL_11":"IL_8"]
head(sampleset)
sampleset<-adData[,20]
head(sampleset)
summary(sampleset)
str(sampleset)
sampleset<-adData[,58:69]
head(sampleset)
preProcess(log10(sampleset+1), method = "pca")
preProcess(sampleset, method = "pca")
summary(preProcess(sampleset, method = "pca"))
preProc<-preProcess(sampleset, method = "pca")
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing<-adData[-inTrain,]
training <-cbind(training[,1],training[,58:69])
testing <-cbind(testing[,1],testing[,58:69])
modeFit<-train(diagnosis~.,data=training,method='glm')
head(training)
training = adData[ inTrain,]
testing<-adData[-inTrain,]
modeFit<-train(diagnosis~IL_11+IL_13+IL_16+IL_17E+IL_IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8,data=training,method='glm')
modeFit<-train(diagnosis~IL_11+IL_13+IL_16+IL_17E+IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8,data=training,method='glm')
?preProcess
preProc<-preProcess(sampleset, method = "pca",thresh = 90)
preProc
preProc<-preProcess(sampleset, method = "pca",thresh = .90)
preProc
training<-training[,1]
training
training = adData[ inTrain,]
training<-cbind(training[,1],training[,58:69])
head(training)
testing<-cbind(testing[,1],testing[,58:69])
modelFit<-train(diagnosis~.,data=training,method="glm")
View(training)
colnames(training)
colnames(training)<-c("diagnosis", "IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor" "IL_7","IL_8")
colnames(training)<-c("diagnosis", "IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor", "IL_7","IL_8")
modelFit<-train(diagnosis~.,data=training,method="glm")
install.packages("e1071")
modelFit<-train(diagnosis~.,data=training,method="glm")
colnames(testing)<-c("diagnosis", "IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor", "IL_7","IL_8")
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
modelFit<-train(training$diagnosis~.,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
Wage <- subset(Wage, select = -c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = .7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[ - inTrain,]
modFit <- train(wage ~ ., method = 'glm', data = training, verbose = FALSE)
print(modFit)
?plot
??plot
install.packages('celestial')
library(celestial)
?celestial
rm(list=ls())
data("iris")
form <- ~Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
rxCovCor(form, data = iris, type = "cov")
debug(rxCorBase)
data(mtcars)
carsxdf <- RxXdfData("carsXdf.xdf")
rxImport(inData = mtcars, outFile = carsxdf, overwrite = TRUE)
carscsv <- RxTextData("carscsv.csv")
rxXdfToText(carsxdf, carscsv, overwrite = TRUE, sep = ",", na = "")
rx1 <- rxSummary( ~ ., mtcars)
rx2 <- rxSummary( ~ ., carsxdf)
rx3 <- rxSummary( ~ ., carscsv)
identical(rx1$sDataFrame, rx2$sDataFrame)
identical(rx1$sDataFrame, rx3$sDataFrame)
rbind(sprintf("%.10f", rx1$sDataFrame[2,]),sprintf("%.10f",rx3$sDataFrame[2,])
rbind(sprintf("%.10f", rx1$sDataFrame[2,]),sprintf("%.10f",rx3$sDataFrame[2,]))
rbind(sprintf("%.10f", rx1$sDataFrame[2,]),sprintf("%.10f",rx3$sDataFrame[2,]))
rbind(sprintf("%.20f", rx1$sDataFrame[2,]),sprintf("%.20f",rx3$sDataFrame[2,]))
rbind(sprintf("%.20f", rx1$sDataFrame),sprintf("%.20f",rx3$sDataFrame))
rbind(sprintf("%.20f", rx1$sDataFrame[1,]),sprintf("%.20f",rx3$sDataFrame[1,]))
rbind(sprintf("%.10f", rx1$sDataFrame[1,]),sprintf("%.10f",rx3$sDataFrame[1,]))
library(RODBC)
?odbcConnect
?odbcQuery
?rxExec
?rxSetComputeContext
?library
mean(c(3,4,5))
getMethods(mean)
findMethods(mean)
findMethods(print)
findMethods(show)
getMethods(show)
showMethods(show)
getwd()
setwd('C:/Users/cchano/Documents/ShinyApps/ShinyApp_Test1')
runApp()
library(shiny)
library(shinyapps)
runApp()
runApp()
runApp()
runApp()
runApp()
library(slidify)
library(slidifyLibraries)
getwd()
setwd('C:/Users/cchano/Documents/ShinyApps')
getwd()
author(mpgPresentation)
author('mpgPresentation')
